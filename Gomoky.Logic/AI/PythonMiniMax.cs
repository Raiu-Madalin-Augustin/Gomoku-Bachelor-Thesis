using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using Gomoku.Logic.BoardRelated;
using Gomoku.Logic.Lines;

namespace Gomoku.Logic.AI
{
    public class PythonMiniMax : MiniMaxBase
    {
        private ICandidateSearcher CandidateSearcher { get; set; }
        private readonly string _cmd = "";
        private readonly string _pythonExecutable;

        public PythonMiniMax()
        {
            CandidateSearcher = new LineBasedCandidates();
            const int BufferSize = 128;
            string path = Directory.GetParent(Directory.GetCurrentDirectory()).Parent.Parent.FullName +
                "\\PythonSettings.txt";
            using var fileStream = File.OpenRead(path);
            using var streamReader = new StreamReader(fileStream, Encoding.UTF8, true, BufferSize);
            string linePythonPath;
            string pythonExecutable;
            
            if ((linePythonPath = streamReader.ReadLine()) != null)
            {
            }
            if ((pythonExecutable = streamReader.ReadLine()) != null)
            {
                _pythonExecutable = pythonExecutable;
            }

            _cmd = Directory.GetParent(Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName+"\\PythonMiniMax\\main.py";
        }

        protected override AnalysisResult DoAnalyze(Game clonedGame)
        {

            if (clonedGame.IsOver)
            {
                return null;
            }

            var movesDictionary = string.Join("|", clonedGame.History.ToDictionary(tile => (tile.X.ToString(), tile.Y.ToString()), tile => tile.Piece.ToString()));
            if (movesDictionary == string.Empty)
            {
                return new AnalysisResult(clonedGame.Board[clonedGame.Board.Width / 2, clonedGame.Board.Height / 2]);
            }

            var forPlayer = clonedGame.Manager.CurrentPlayer;

            //var args = new List<string> { movesDictionary, forPlayer };
            var args = forPlayer.Piece.TypeIndex == 1 ? 1 + movesDictionary : 2 + movesDictionary;
            var start = new ProcessStartInfo
            {
                FileName = _pythonExecutable,
                Arguments = $"\"{_cmd}\" \"{args}\"",
                UseShellExecute = false, // Do not use OS shell
                CreateNoWindow = true, // We don't need new window
                RedirectStandardOutput = true, // Any output, generated by application will be redirected back
                RedirectStandardError = true // Any error in standard output will be redirected back (for example exceptions)
            };

            using var process = Process.Start(start);
            using var reader = process?.StandardOutput;
            var stderr = process?.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
            var result = reader?.ReadToEnd().Split(" "); // Here is the result of StdOut(for example: print "test")
            var tile = new Tile(Convert.ToInt32(result?[0]), Convert.ToInt32(result?[1]), new Piece());
            return new AnalysisResult(tile);
        }
    }
}

